ابتدا دقت کنید که ساختار Makefile تشکیل شده از تعدادی rule است که هرکدام ساختار این چنینی دارند:
targets: prerequisites
	command
	command
	command

به‌طور پیش‌فرض فایل از اولین تارگت(هدف) اجرا می‌شود. فایل‌های نیازمندی آن که جلوی هدف نوشته شده در صورتی که در فایل به‌عنوان هدف مشخص شده باشند اجرا شده و سپس دستورها اجرا می‌شوند.
اکنون در این فایل هر یک از خطوط مربوط به فایل Makefile را توضیح می‌دهیم.

خط۱:
.DEFAULT_GOAL یکی از Special Variable های Makefile است.
وظیفه‌ی آن نیز همان‌طور که از نامش واضح است، Set کردن Defaul Goal است.
به این معنا که اگر هدفی را در کامندلاین مشخص نکنیم، به هدف اساین شده به این متغیر می‌رویم و از آن‌جا فایل اجرا می‌شود.

خط۳:
در این خط متغیر CC اساین شده است.
دقت کنید که عبارت ?= متغیر را تنها زمانی مقداردهی می‌کند که از قبل مقداردهی نشده باشد یا به عبارتی رفرنس و مقدار نداشته باشد.
متغیر CC نیز کامپایلر زبان برنامه‌نویسی C را درون خود نگه می‌دارد.

خط۴:
در این خط نیز مشابه خط قبلی، متغیر CFLAGS را با مقدار -Wall مقداردهی کرده‌ایم.
پرچم -Wall یکی از پرچم‌های کامپایلر gcc است که در خط قبلی ست کرده‌ایم.
با اجرای دستور man CC در این‌جا می‌توانیم تمام پرچم‌های این کامپایلر را ببینیم.
فلگ -Wall تمام هشدارها از جمله هشدارهای مربوط به ساختار کد که عموما رفع و پیشگیری از آن‌ها آسان‌تر است را فعال می‌کند.
همچنین با فعال شدن فلگ -Wall تعدادی فلگ هشداری دیگر نیز فعال می‌شوند.

خط۵:
در این خط متغیر SOURCES مقداردهی شده که مقدار آن فایل‌هایی است که به‌عنوان ورودی به کامپایلر می‌دهیم تا کامپایل کند.
بنابراین در این‌جا فایل‌های main.c و word_count.c نوشته شده اند.

خط ۷:
متغیر LIBRARIES شامل کتابخانه‌هایی که در کد استفاده شده‌اند، مقداردهی شده است.

خط ۸:
متغیر BINARIES شامل فایل خروجی‌ای که فایل باینری کامپایل شده‌است می‌شود، مقداردهی شده‌است. 

خط ۱۰:
در ابتدا دقت کنید که عملگر % در Makefile یک Wildcard است و مانند رجکس با رشته یا کاراکتر match می‌شود.
بنابراین زمان اجرای دستور make این پترن می‌تواند با آرگومان‌های دستور مچ بشود.
%: %.c
بنابراین خط بالا خط اول rule است که هر رشته‌ای می‌تواند به‌عنوان نام هدف آن باشد و فایلی که پسوند آن .c باشد به‌عنوان prerequisites محسوب می‌شود.یعنی ابتدا به تارگتی با نام آن رفته و سپس کامندها اجرا می‌شوند.

خط ۱۱:
در این خط تعدادی متغیر کنار هم گذاشته شده اند و تشکیل یک دستور می‌دهند.
دقت کنید مقدار متغیرها را با استفاده از $() می‌توان دسترسی داشت.
دقت کنید که متغیر @ نام تارگتی‌است که در خط قبل به‌عنوان Wildcard در دستور make ورودی می‌گیریم.
متغیر ^ نیز شامل نام تمام prerequisites می‌شود.
پس دستور ترجمه شده این‌گونه است:
gcc -Wall wc_sort.o -o targetname prerequisites

خط ۱۳:
این rule نیز همان‌گونه که از اسم هدفش مشخص است، وظیفه‌اش پاک کردن تعدادی فایل است.

خط ۱۴:
در این خط کامند rm با فلگ -f که فلگ force است، فایل words موجود در همین دایرکتوری را پاک می‌کند.

خط ۱۶:
در این‌جا نیز یک rule با نام تارگت executable تعریف می‌کنیم.

خط ۱۷:
در این‌جا متغیرهای تعریف شده پشت هم قرارداده شده‌اند و مقادیر آن‌ها این‌گونه می‌شود:
gcc -Wall main.c word_count.c wc_sort.o -o words 
که این دستور با استفاده از کامپایلر gcc و پرچم -Wall فایل‌های داده شده را کامپایل کرده و خروجی باینری را در words می‌ریزد.

خط ۱۹:
تارگت default تعریف شده و نیازمندی آن اجرای تارگت executable است که پیش‌تر تعریف کردیم.
دقت کنید با توجه به این‌که DEFAULT_GOAL در ابتدای کد این تارگت بوده، پس فایل از این تارگت اجرا شده، به تارگت executable رفته، دستور آن را اجرا کرده و پایان می‌یابد.
پس تنها فایل‌های main.c و word_count.c و wc_sort.o کامپایل شده و خروجی باینری آن در words ریخته می‌شود.
